{"protocolVersion":"0.1.1","runnerVersion":null,"pid":34748,"type":"start","time":0}
{"suite":{"id":0,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/providers/route_list_provider_test.dart"},"type":"suite","time":0}
{"test":{"id":1,"name":"loading C:/Users/david/Projects/nomad_app/test/providers/route_list_provider_test.dart","suiteID":0,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":1}
{"suite":{"id":2,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart"},"type":"suite","time":4}
{"test":{"id":3,"name":"loading C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart","suiteID":2,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4}
{"suite":{"id":4,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/screens/home/providers/all_countries_provider_test.dart"},"type":"suite","time":4}
{"test":{"id":5,"name":"loading C:/Users/david/Projects/nomad_app/test/screens/home/providers/all_countries_provider_test.dart","suiteID":4,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4}
{"suite":{"id":6,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/screens/home/providers/queried_country_list_provider_test.dart"},"type":"suite","time":4}
{"test":{"id":7,"name":"loading C:/Users/david/Projects/nomad_app/test/screens/home/providers/queried_country_list_provider_test.dart","suiteID":6,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":4}
{"suite":{"id":8,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/all_cities_provider_test.dart"},"type":"suite","time":5}
{"test":{"id":9,"name":"loading C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/all_cities_provider_test.dart","suiteID":8,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":5}
{"suite":{"id":10,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/availability_city_list_provider_test.dart"},"type":"suite","time":6}
{"test":{"id":11,"name":"loading C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/availability_city_list_provider_test.dart","suiteID":10,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":6}
{"count":7,"time":7,"type":"allSuites"}
{"testID":1,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":1914}
{"group":{"id":12,"suiteID":0,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":null,"column":null,"url":null},"type":"group","time":1917}
{"group":{"id":13,"suiteID":0,"parentID":12,"name":"route list provider","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":14,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/route_list_provider_test.dart"},"type":"group","time":1918}
{"test":{"id":14,"name":"route list provider routeListProvider state should be initialized to empty list","suiteID":0,"groupIDs":[12,13],"metadata":{"skip":false,"skipReason":null},"line":16,"column":5,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/route_list_provider_test.dart"},"type":"testStart","time":1918}
{"testID":14,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":1981}
{"suite":{"id":15,"platform":"vm","path":"C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/queried_city_list_provider_test.dart"},"type":"suite","time":2008}
{"test":{"id":16,"name":"loading C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/queried_city_list_provider_test.dart","suiteID":15,"groupIDs":[],"metadata":{"skip":false,"skipReason":null},"line":null,"column":null,"url":null},"type":"testStart","time":2008}
{"testID":3,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":2042}
{"group":{"id":17,"suiteID":2,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":2042}
{"group":{"id":18,"suiteID":2,"parentID":17,"name":"selected country provider","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":16,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart"},"type":"group","time":2043}
{"test":{"id":19,"name":"selected country provider selctedCountryProvider state should be initialized to null","suiteID":2,"groupIDs":[17,18],"metadata":{"skip":false,"skipReason":null},"line":17,"column":5,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart"},"type":"testStart","time":2043}
{"testID":19,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2101}
{"test":{"id":20,"name":"selected country provider selectedCountryProvider state should set state to the country passed via setCountry","suiteID":2,"groupIDs":[17,18],"metadata":{"skip":false,"skipReason":null},"line":37,"column":5,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart"},"type":"testStart","time":2102}
{"testID":20,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2110}
{"test":{"id":21,"name":"selected country provider selectedCountryProvider should reset routeListProvider state when country passed via setCountry","suiteID":2,"groupIDs":[17,18],"metadata":{"skip":false,"skipReason":null},"line":64,"column":5,"url":"file:///C:/Users/david/Projects/nomad_app/test/providers/selected_country_provider_test.dart"},"type":"testStart","time":2111}
{"testID":21,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2121}
{"testID":5,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":2238}
{"group":{"id":22,"suiteID":4,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":1,"line":null,"column":null,"url":null},"type":"group","time":2238}
{"test":{"id":23,"name":"allCountriesProvider state should be initialized to a list of all countries fetched from the destinationRepository","suiteID":4,"groupIDs":[22],"metadata":{"skip":false,"skipReason":null},"line":18,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/home/providers/all_countries_provider_test.dart"},"type":"testStart","time":2238}
{"testID":23,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2289}
{"testID":7,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":2552}
{"group":{"id":24,"suiteID":6,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":2552}
{"test":{"id":25,"name":"queriedCountryListProvider state should be initialized to the value of allCountriesProvider","suiteID":6,"groupIDs":[24],"metadata":{"skip":false,"skipReason":null},"line":45,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/home/providers/queried_country_list_provider_test.dart"},"type":"testStart","time":2552}
{"testID":25,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2619}
{"test":{"id":26,"name":"if queriedCountryListProvider.filter is called then its state should be filtered to only contain Countries that contain the userInput","suiteID":6,"groupIDs":[24],"metadata":{"skip":false,"skipReason":null},"line":54,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/home/providers/queried_country_list_provider_test.dart"},"type":"testStart","time":2620}
{"testID":26,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2633}
{"test":{"id":27,"name":"if queriedCountryListProvider.reset is called then its state should be set back to allCountriesProvider state","suiteID":6,"groupIDs":[24],"metadata":{"skip":false,"skipReason":null},"line":65,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/home/providers/queried_country_list_provider_test.dart"},"type":"testStart","time":2634}
{"testID":27,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2642}
{"testID":9,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":2778}
{"group":{"id":28,"suiteID":8,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":2,"line":null,"column":null,"url":null},"type":"group","time":2779}
{"test":{"id":29,"name":"allCitiesProvider state should be a list of all the cities for the country stored in selectedCountryProvider","suiteID":8,"groupIDs":[28],"metadata":{"skip":false,"skipReason":null},"line":51,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/all_cities_provider_test.dart"},"type":"testStart","time":2779}
{"testID":29,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2841}
{"test":{"id":30,"name":"if the country in selectedCountryProvider changes then allCitiesProvider state should dynamically be updated to reflect these new cities","suiteID":8,"groupIDs":[28],"metadata":{"skip":false,"skipReason":null},"line":60,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/all_cities_provider_test.dart"},"type":"testStart","time":2850}
{"testID":30,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":2867}
{"testID":11,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":3002}
{"group":{"id":31,"suiteID":10,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":3003}
{"test":{"id":32,"name":"availabilityCityListProvider state be initialized to allCitiesProvider state","suiteID":10,"groupIDs":[31],"metadata":{"skip":false,"skipReason":null},"line":54,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/availability_city_list_provider_test.dart"},"type":"testStart","time":3003}
{"testID":32,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3060}
{"test":{"id":33,"name":"if a city is added to routeListProvider state then this city should be dynamically removed from availabilityCityListProvider state","suiteID":10,"groupIDs":[31],"metadata":{"skip":false,"skipReason":null},"line":66,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/availability_city_list_provider_test.dart"},"type":"testStart","time":3060}
{"testID":33,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3070}
{"test":{"id":34,"name":"if a city is removed from routeListProvider state then this city should be dynamically added to availabilityCityListProvider state","suiteID":10,"groupIDs":[31],"metadata":{"skip":false,"skipReason":null},"line":82,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/availability_city_list_provider_test.dart"},"type":"testStart","time":3070}
{"testID":34,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3079}
{"testID":16,"result":"success","skipped":false,"hidden":true,"type":"testDone","time":3200}
{"group":{"id":35,"suiteID":15,"parentID":null,"name":"","metadata":{"skip":false,"skipReason":null},"testCount":3,"line":null,"column":null,"url":null},"type":"group","time":3201}
{"test":{"id":36,"name":"queriedCityListProvider state should be initialized to the value of availableCityListProvider","suiteID":15,"groupIDs":[35],"metadata":{"skip":false,"skipReason":null},"line":53,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/queried_city_list_provider_test.dart"},"type":"testStart","time":3201}
{"testID":36,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3261}
{"test":{"id":37,"name":"if queriedCityListProvider.filter is called then its state should be filtered to only contain Cities that contain the userInput","suiteID":15,"groupIDs":[35],"metadata":{"skip":false,"skipReason":null},"line":63,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/queried_city_list_provider_test.dart"},"type":"testStart","time":3262}
{"testID":37,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3268}
{"test":{"id":38,"name":"queriedCityListProvider state should re-initialize to availabilityCityListProvider state whenever availabilityCityListProvider state changes","suiteID":15,"groupIDs":[35],"metadata":{"skip":false,"skipReason":null},"line":75,"column":3,"url":"file:///C:/Users/david/Projects/nomad_app/test/screens/select_city/providers/queried_city_list_provider_test.dart"},"type":"testStart","time":3269}
{"testID":38,"result":"success","skipped":false,"hidden":false,"type":"testDone","time":3276}
{"success":true,"type":"done","time":3299}
